#!/bin/python3

import socket
import threading                                                  from queue import Queue
import signal
import sys
                                                                  # Códigos ANSI para cores                                         BLUE = "\033[1;36m"  # Azul claro
RESET = "\033[0m"    # Resetar a cor

# Banner ASCII
banner = r"""
 ___  ________  ________  ________  ________  ________
|\  \|\   __  \|\   ____\|\   ____\|\   __  \|\   ___  \
\ \  \ \  \|\  \ \  \___|\ \  \___|\ \  \|\  \ \  \\ \  \
 \ \  \ \   ____\ \_____  \ \  \    \ \   __  \ \  \\ \  \
  \ \  \ \  \___|\|____|\  \ \  \____\ \  \ \  \ \  \\ \  \
   \ \__\ \__\     ____\_\  \ \_______\ \__\ \__\ \__\\ \__\
    \|__|\|__|    |\_________\|_______|\|__|\|__|\|__| \|__|
                  \|_________|
"""

# Exibe o banner em azul claro
print(BLUE + banner + RESET)

LHOST = input("Digite o DNS ou o IP... >> ")

# Define um tempo limite para a conexão
socket.setdefaulttimeout(1)

# Variável global para controle de execução
running = True

# Função para lidar com o sinal de interrupção
def signal_handler(sig, frame):
    global running
    running = False
    print("\nInterrompendo o escaneamento...")

# Registra o manipulador de sinal
signal.signal(signal.SIGINT, signal_handler)

# Função para escanear uma porta
def scan_port(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = s.connect_ex((LHOST, port))
    if result == 0:
        print(f"Porta {port} está aberta")
    s.close()

# Cria uma fila para as portas
port_queue = Queue()

# Adiciona portas à fila (1 a 1024)
for port in range(1, 1025):
    port_queue.put(port)

# Função para processar a fila de portas
def worker():
    while running and not port_queue.empty():
        port = port_queue.get()
        scan_port(port)
        port_queue.task_done()

# Número de threads
num_threads = 10

# Cria e inicia as threads
threads = []
for _ in range(num_threads):
    t = threading.Thread(target=worker)
    t.start()
    threads.append(t)

# Aguarda todas as threads terminarem
for t in threads:
    t.join()

print("Escaneamento concluído.")
